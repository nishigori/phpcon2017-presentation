/*
 * Amazon ECS Clusters
 *
 * http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_clusters.html
 */

resource "aws_ecs_cluster" "phpcon2017" {
  name = "phpcon2017"
}

resource "aws_autoscaling_group" "phpcon2017" {
  name                 = "${aws_ecs_cluster.phpcon2017.name}"
  enabled_metrics      = [
    # http://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-monitoring.html#as-enable-group-metrics
    "GroupDesiredCapacity"
  ]

  launch_configuration = "${aws_launch_configuration.phpcon2017.name}"
  termination_policies = ["OldestInstance"]

  # NOTE: this module no handled desired capacity
  #desired_capacity     = "${var.asg_desired}"
  min_size             = "1"
  max_size             = "4"

  vpc_zone_identifier  = ["${split(",", module.private_subnet.subnet_ids)}"]
  default_cooldown     = 150

  tags = [
    {
      key                 = "Name"
      value               = "phpcon2017-ecs-cluster"
      propagate_at_launch = true
    }
  ]

  lifecycle {
    create_before_destroy = true
    # NOTE: changed automacally by autoscale policy
    ignore_changes        = ["desired_capacity"]
  }
}

resource "aws_launch_configuration" "phpcon2017" {
  name_prefix                 = "${aws_ecs_cluster.phpcon2017.name}-"
  security_groups             = ["${aws_security_group.ecs_cluster.id}"]
  key_name                    = "${aws_key_pair.phpcon2017.key_name}"
  image_id                    = "${data.aws_ami.coreos.image_id}"
  instance_type               = "m4.xlarge"
  ebs_optimized               = true
  iam_instance_profile        = "${aws_iam_instance_profile.ecs_instance.name}"
  user_data                   = "${data.template_file.ecs_cloud_config.rendered}"
  associate_public_ip_address = false
  enable_monitoring           = true

  # NOTE: Currently no-support to customizing block device(s)
  #       - OS specified image_id is not always using /dev/xvdcz as docker storage
  #       - As a workaround, creates the ami that it is customizing to the block device mappings
  #root_block_device {}
  #ebs_block_device  { device_name = "/dev/xvdcz" }

  lifecycle {
    create_before_destroy = true
  }
}

data "aws_ami" "coreos" {
  most_recent = true

  filter {
    name   = "name"
    values = ["CoreOS-alpha-*"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  # CoreOS Account ID
  owners = ["595879546273"]
}

data "template_file" "ecs_cloud_config" {
  template = "${file("ecs_cloud_config.tpl.yml")}"

  vars {
    aws_region         = "${var.region}"
    ecs_cluster_name   = "${aws_ecs_cluster.phpcon2017.name}"
    ecs_log_level      = "info"
    ecs_agent_version  = "latest"
    ecs_log_group_name = "${aws_cloudwatch_log_group.ecs_agent.name}"
  }
}

resource "aws_key_pair" "phpcon2017" {
  key_name   = "phpcon2017"
  # Generated by Makefile
  public_key = "${file(".ssh/aws-keypair.pub")}"
}

resource "aws_cloudwatch_log_group" "ecs_agent" {
  name              = "phpcon2017/ecs-agent"
  retention_in_days = 3
}

resource "aws_security_group" "ecs_cluster" {
  vpc_id      = "${module.vpc.vpc_id}"
  name        = "ecs cluster"
  description = "ecs cluster (related ec2 instances) security_group"

  tags {
    Name = "ecs-cluster"
  }
}

# Using dynamic host port mapping
# http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html
resource "aws_security_group_rule" "ecs_dynamic_ports" {
  security_group_id        = "${aws_security_group.ecs_cluster.id}"
  type                     = "ingress"
  protocol                 = "tcp"
  from_port                = 0
  to_port                  = 65535
  source_security_group_id = "${aws_security_group.alb.id}"
}

resource "aws_security_group_rule" "ecs_outbound_allow_all" {
  security_group_id = "${aws_security_group.ecs_cluster.id}"
  type              = "egress"
  protocol          = "-1"
  from_port         = 0
  to_port           = 0
  cidr_blocks       = ["0.0.0.0/0"]
}

resource "aws_iam_role" "ecs_instance" {
  name                  = "${aws_ecs_cluster.phpcon2017.name}-ecs-instance-role"
  force_detach_policies = true

  assume_role_policy    = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "ecs_instance_policy" {
  role       = "${aws_iam_role.ecs_instance.name}"
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  depends_on = ["aws_iam_role.ecs_instance"]
}

resource "aws_iam_instance_profile" "ecs_instance" {
  name       = "${aws_ecs_cluster.phpcon2017.name}-ecs-instance-profile"
  role       = "${aws_iam_role.ecs_instance.name}"

  depends_on = ["aws_iam_role.ecs_instance"]
}
